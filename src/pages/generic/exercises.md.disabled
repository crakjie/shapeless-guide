
### Exercice : Aligner les colonnes d'une sortie CSV

Il serait peut-être préférable de séparer
les données des rectangles et des cercles 
dans deux ensembles de colonnes séparés.
Pour ce faire, nous pouvons ajouter un champ `width` à `CsvEncoder`:

```disabledtut:book:silent
trait CsvEncoder[A] {
  def width: Int
  def encode(value: A): List[String]
}
```

Si l'on se conforme à nos définitions,
nous pouvons produire des instances
qui placent chaque champ de l'ADT dans une colonne différente.
Ceci peut constituer un exercice pour le lecteur.

<div class="solution">
Commençons par modifier la définition de `createEncoder`
pour accepter un paramètre `width` :

```disabledtut:book:silent
def createEncoder[A](cols: Int)(func: A => List[String]): CsvEncoder[A] =
  new CsvEncoder[A] {
    val width = cols
    def encode(value: A): List[String] =
      func(value)
  }
```

Nous modifions ensuite nos encodeurs de base pour que chacun garde une largeur de `1` :

```disabledtut:book:silent
implicit val stringEncoder: CsvEncoder[String] =
  createEncoder(1)(str => List(str))

implicit val intEncoder: CsvEncoder[Int] =
  createEncoder(1)(num => List(num.toString))

implicit val booleanEncoder: CsvEncoder[Boolean] =
  createEncoder(1)(bool => List(if(bool) "cone" else "glass"))

implicit val doubleEncoder: CsvEncoder[Double] =
  createEncoder(1)(d => List(d.toString))
```

Nos encodeurs pour `HNil` et `CNil` ont une largeur de `0` et nos
encodeurs pour `::` et `:+:` ont une largeur déterminée par
les encodeurs pour les têtes et les queues :

```disabledtut:book:silent
import shapeless.{HList, HNil, ::}

implicit val hnilEncoder: CsvEncoder[HNil] =
  createEncoder(0)(hnil => Nil)

implicit def hlistEncoder[H, T <: HList](
  implicit
  hEncoder: CsvEncoder[H],
  tEncoder: CsvEncoder[T]
): CsvEncoder[H :: T] =
  createEncoder(hEncoder.width + tEncoder.width) {
    case h :: t =>
      hEncoder.encode(h) ++ tEncoder.encode(t)
  }
```

Notre encodeur `:+:` décale la sortie avec un nombre de colonnes 
égal à la largeur de l'encodeur qu'il n'utilise pas pour la sérialisation :

```disabledtut:book:silent
import shapeless.{Coproduct, CNil, :+:, Inl, Inr}

implicit val cnilEncoder: CsvEncoder[CNil] =
  createEncoder(0) { cnil =>
    throw new Exception("The impossible has happened!")
  }

implicit def coproductEncoder[H, T <: Coproduct](
  implicit
  hEncoder: CsvEncoder[H],
  tEncoder: CsvEncoder[T]
): CsvEncoder[H :+: T] =
  createEncoder(hEncoder.width + tEncoder.width) {
    case Inl(h) => hEncoder.encode(h) ++ List.fill(tEncoder.width)("")
    case Inr(t) => List.fill(hEncoder.width)("") ++ tEncoder.encode(t)
  }
```

Enfin, notre encodeur d'ADT reflète la largeur de
l'encodeur de sa représentation générique :

```disabledtut:book:silent
import shapeless.Generic

implicit def genericEncoder[A, R](
  implicit
  gen: Generic.Aux[A, R],
  lEncoder: CsvEncoder[R]
): CsvEncoder[A] =
  createEncoder(lEncoder.width) { value =>
    lEncoder.encode(gen.to(value))
  }
```

Avec toutes ces définitions,
notre méthode `writeCsv` obtient la capacité d'aligner correctement sa sortie :

```disabledtut:book:invisible
def writeCsv[A](values: List[A])(implicit encoder: CsvEncoder[A]): String =
  values.map(encoder.encode).map(_.mkString(",")).mkString("\n")
```

```disabledtut:book
writeCsv(shapes)
```
</div>
